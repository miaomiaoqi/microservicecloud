<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。
debug: 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。
-->
<configuration scan="true" scanPeriod="6000" debug="false">
    <!--    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->

    <!--定义参数,后面可以通过${loggerAppName}使用-->
    <property name="loggerRoot" value="/Users/miaoqi/Documents/study/language/java/log/logback/logs"/>
    <property name="loggerAppName" value="my-log"/>
    <property name="logPattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [${loggerAppName},%X{X-B3-TraceId},%X{X-B3-SpanId},%thread] [%-5level] [%logger{10}] %msg%n"/>

    <!-- ConsoleAppender 用于在屏幕上输出日志 -->
    <appender name="STDOUT-APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 定义控制台输出格式 -->
        <!-- encoder: 默认配置为 PatternLayoutEncoder -->
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <!-- ConsoleAppender 用于在屏幕上输出日志 -->
    <appender name="ERROROUT-APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 定义了一个过滤器, 在 LEVEL 之下的日志输出不会被打印出来 -->
        <!-- 这里定义了 ERROR，也就是控制台不会输出比 ERROR级 别小的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>error---${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- RollingFileAppender 向文件输出日志内容的组件，同时可以配置日志文件滚动策略，在日志达到一定条件后生成一个新的日志文件。 -->
    <appender name="REQUEST-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 定义日志输出的路径, 日志会优先向这个文件输出, 如果这个文件的大小达到 maxFileSize 设定的值, 会生产滚动日志并且该日志会重建 -->
        <file>${loggerRoot}/${loggerAppName}/request.log</file>
        <!-- 定义日志滚动的策略 -->
        <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--            &lt;!&ndash; 定义文件滚动时的文件名的格式 &ndash;&gt;-->
        <!--            <fileNamePattern>${loggerRoot}/${loggerAppName}/request.log.%d{yyyy-MM-dd}.out</fileNamePattern>-->
        <!--            &lt;!&ndash; 3 天的时间周期，日志量最大 20KB &ndash;&gt;-->
        <!--            <maxHistory>3</maxHistory>-->
        <!--            &lt;!&ndash; 该属性在 1.1.6版本后 才开始支持 &ndash;&gt;-->
        <!--            <totalSizeCap>30KB</totalSizeCap>-->
        <!--        </rollingPolicy>-->
        <!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--            &lt;!&ndash; 每个日志文件最大 5KB &ndash;&gt;-->
        <!--            <maxFileSize>5KB</maxFileSize>-->
        <!--        </triggeringPolicy>-->
        <!--    这个滚动策略包含了上边的两种滚动策略    -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>${loggerRoot}/${loggerAppName}/request.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <!-- 每个文件不能超过 5KB, 如果超过 5KB 会产生一个新的日志文件 -->
            <maxFileSize>5KB</maxFileSize>
            <!-- 保存 2 天, 旧的日志文件会被删除 -->
            <maxHistory>2</maxHistory>
            <!-- 所有日志文件的总大小不能超过 100KB, 如果超过 100KB, 旧的文件会被删除 -->
            <totalSizeCap>100KB</totalSizeCap>
            <!--
                是否在应用启动的时候清除历史日志, 需要和 maxHistory 配合使用, SizeAndTimeBasedRollingPolicy 只有在写入日志时才会被触发,
                如果我们想启动的时候就触发, 可以配置该参数
             -->
            <cleanHistoryOnStart>false</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--
    日志的级别由低到高 trace < debug < info < warn < error, 可以调整输出的日志级别;日志就只会在这个级别以以后的高级别生效
    root 是默认的 logger, 所有的 logger 标签都会继承 root 标签
    -->
    <root level="info">
        <!-- 定义了两个appender，日志会通过往这两个 appender 的配置输出日志 -->
        <appender-ref ref="STDOUT-APPENDER"/>
        <appender-ref ref="ERROROUT-APPENDER"/>
    </root>

    <!-- 通过 LoggerFactory.getLogger("mapperOut") 可以获取到这个logger,输出级别设置为 warn -->
    <!-- 这个 logger 没有指定 appender，它会继承 root 节点中定义的那些 appender -->
    <logger name="mapperOut" level="warn"></logger>

    <!-- 由于设置了 additivity="false" ，所以输出时不会使用 rootLogger 的 appender -->
    <!-- 但是这个 logger 本身又没有配置 appender，所以使用这个 logger 输出日志的话就不会输出到任何地方 -->
    <logger name="noneOut" level="info" additivity="false"/>

    <!-- 对于类路径以 com.miaoqi.logback.request 开头的 Logger,输出级别设置为 info, 可以获取到该 logger -->
    <!-- additivity=fasle 表示要不要使用 rootLogger 配置的 appender 进行输出 -->
    <logger name="com.miaoqi" level="info" additivity="false">
        <appender-ref ref="REQUEST-APPENDER"/>
    </logger>

</configuration>
